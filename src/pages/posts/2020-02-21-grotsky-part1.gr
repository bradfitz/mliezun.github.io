
let base = import("../base.gr")

# Create new Post Object
let post = base.Post(
    "Grotsky Part 1: Syntax",
    "Part 1 of building my own laguage series. Defining the syntax of grotsky toy language.",
    "Miguel Liezun",
    ["parser", "lexer", "interpreter"],
    [
    [
        "h2",
        [],
        "Grotsky Part 1: Syntax"
    ],
    [
        "div",
        [],
        "\n"
    ],
    [
        "h4",
        [],
        "Syntax Restrictions"
    ],
    [
        "div",
        [],
        "\n"
    ],
    [
        "h4",
        [],
        "Primitives"
    ],
    [
        "div",
        [],
        "\n- No use of semicolon `;`\n- Block statements delimited by `begin` and `end`\n- Function definition using `fn` keyword\n- Logic operators in plain english `or`, `and`, `not`\n- Conditional statements use the following keywords: `if`, `elif`, `else`\n- There is no switch statement\n- Class definition with `class` keyword\n- Arithmetic operations: `*`, `/`, `-`, `+`, `^`\n- Grouping with parentheses `()`\n- Native support for python-like lists and dictionaries: `[]`, `{}`\n- Support for enhanced for loop: `for i, el in array`\n- Keywords and identifiers can only use alphabethic characters\n\n"
    ],
    [
        "h4",
        [],
        "Example of functions and operations"
    ],
    [
        "div",
        [],
        "\n- `nil`\n- Integers\n- Floats\n- Booleans\n- Strings\n- Lists\n- Dictionaries\n\n"
    ],
    [
        "h3",
        [],
        "Arithmethic"
    ],
    [
        "div",
        [],
        "\n```ruby\n"
    ],
    [
        "h2",
        [],
        "Output: -5945"
    ],
    [
        "div",
        [],
        "print(2^10 - 2323*3)\n"
    ],
    [
        "h2",
        [],
        "Output: 1.8189894035458565e-12"
    ],
    [
        "div",
        [],
        "print(2^(12*3+400/-4+10*5/2))\n"
    ],
    [
        "h3",
        [],
        "Logic"
    ],
    [
        "div",
        [],
        "\n"
    ],
    [
        "h2",
        [],
        "Output: true (short circuit)"
    ],
    [
        "div",
        [],
        "print(true or false)\n"
    ],
    [
        "h2",
        [],
        "Output: false (short circuit)"
    ],
    [
        "div",
        [],
        "print(false and true)\n"
    ],
    [
        "h3",
        [],
        "Conditionals"
    ],
    [
        "div",
        [],
        "\n"
    ],
    [
        "h3",
        [],
        "Lists"
    ],
    [
        "div",
        [],
        "if 3 > 2 or (1 < 3 and 2 == 2) begin\n    print('Condition is true')\nend\nelif 3 == 4 begin\n    print('Condition 2 is true')\nend\nelse begin\n    print('Conditions are false')\nend\n\n"
    ],
    [
        "h3",
        [],
        "Dictionaries"
    ],
    [
        "div",
        [],
        "for i in [1, 2, 3, 4] begin\n    print(i)\nend\n\nlet lst = [1, 2, 3, 4]\nlst[0] = -1\nprint(lst) # Output: [-1, 2, 3, 4]\nprint(lst[1:3]) # Output: [2, 3]\n\n"
    ],
    [
        "h2",
        [],
        "(dictionaries and lists not allowed as keys)"
    ],
    [
        "div",
        [],
        "let dct = {\n"
    ],
    [
        "h3",
        [],
        "Functions"
    ],
    [
        "div",
        [],
        "    \"Key1\": \"Val1\",\n    2: \"Val2\",\n    true: false\n}\nfor key, val in dct begin\n    print(key, val)\nend\n\n"
    ],
    [
        "h3",
        [],
        "Clojure"
    ],
    [
        "div",
        [],
        "fn square(x)\nbegin\n    return x^2\nend\n\nfn operate(x, operation)\nbegin\n    return operation(x)\nend\n\n"
    ],
    [
        "h3",
        [],
        "Classes"
    ],
    [
        "div",
        [],
        "fn makeCounter()\nbegin\n    let n = 0\n    return fn() begin\n        n = n+1\n        return n\n    end\nend\n\n"
    ],
    [
        "h4",
        [],
        "Syntax definition"
    ],
    [
        "div",
        [],
        "class Counter\nbegin\n    init(start) begin\n        self.start = start\n    end\n    count() begin\n        self.start = self.start+1\n        return self.start\n    end\nend\n\nclass CounterTwo\nbegin\n    count() begin\n        return super.count()*2\n    end\nend\n```\n\n"
    ],
    [
        "h5",
        [],
        "Expresions"
    ],
    [
        "div",
        [],
        "\nLet's build a syntax definition in backus naur format that will be easy to parse with a recursive descent parser.\n\n"
    ],
    [
        "h5",
        [],
        "Statements"
    ],
    [
        "div",
        [],
        "\n```\nexpression       assignment;\nlist             \"[\" arguments? \"]\";\ndictionary       \"{\" dict_elements? \"}\";\ndict_elements    keyval (\",\" keyval)*;\nkeyval           expression \":\" expression;\nassignment       (call \".\")? IDENTIFIER \"=\" assignment | access;\naccess           logic_or (\"[\" slice \"]\")*;\nlogic_or         logic_and (\"or\" logic_and)*;\nlogic_and        equality (\"and\" equality)*;\nequality         comparison ((\"!=\" | \"==\") comparison)*;\ncomparison       addition ((\">\" | \">=\" | \"<\" | \"<=\") addition)*;\naddition         multiplication ((\"-\" | \"+\") multiplication)*;\nmultiplication   power ((\"/\" | \"*\") power)*;\npower            unary (\"^\" unary)*;\nunary            (\"not\" | \"-\") unary | call;\ncall             primary (\"(\" arguments? \")\" | \".\" IDENTIFIER)*;\narguments        expression (\",\" expression)*;\nslice            (\":\" expression)\n                | (\":\" expression \":\" expression)\n                | (\":\" \":\" expression)\n                | expression\n                | (expression \":\")\n                | (expression \":\" expression)\n                | (expression \":\" \":\" expression)\n                | (expression \":\" expression \":\" expression);\nprimary          NUMBER\n                | STRING\n                | \"false\"\n                | \"true\"\n                | \"nil\"\n                | IDENTIFIER\n                | \"(\" expression \")\"\n                | fnAnon\n                | list\n                | dictionary;\nfnAnon           \"fn\" \"(\" parameters? \")\" block;\n```\n\n"
    ]
]
)
