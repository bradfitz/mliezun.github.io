
let base = import("../base.gr")

# Create new Post Object
let post = base.Post(
    "Grotsky Part 4: Writing a service to get your public IP",
    "Part 4 of building my own language series. This time I write and deploy a service to Heroku that let's your retrieve your pulbic IP.",
    "Miguel Liezun",
    "grotsky,service,http,heroku,ip",
    [
    [
        "div",
        [],
        [
            "",
            ""
        ]
    ],
    [
        "h2",
        [],
        [
            "Writing a service to get your public IP"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<a href=\"https://github.com/mliezun/grotsky\">Grotsky</a> (my toy programming language) finally can be used to make something useful.",
            "",
            "In this post I want to show you how I made a service that let's your retrieve your public IP as a response to a HTTP Request.",
            "",
            ""
        ]
    ],
    [
        "h3",
        [],
        [
            "Show me the code"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "Let's start by building the http request handler.",
            "",
            "The service will be deployed to heroku. Heroku passes the port that the http server has to listen as an environment variable named <span class=\"single-quote\">PORT</span>.",
            "",
            ""
        ]
    ],
    [
        "h5",
        [],
        [
            "Let's get the server up and running"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<pre class=\"triple-quote \">",
            "let listen = \":8092\"",
            "let port = env.get(\"PORT\")",
            "if port != \"\" {",
            "    listen = \":\" + port",
            "}",
            "",
            "io.println(\"Listen \" + listen)",
            "http.listen(listen)",
            "</pre>",
            "",
            "We listen by default at the port 8092 and if the environment variable is given we change it.",
            "",
            "Then we print what is the port and start the server with <span class=\"single-quote\">http.listen</span>. That blocks the execution and starts the server.",
            "",
            "Grotsky interpreter is written in Go, and uses Go's standard http server. Each requests is handled by a goroutine, but because Grotsky is single threaded only one goroutine executes at any given point in time. ",
            "",
            "When a request is received the goroutine has to hold the GIL (Global Interrupt Lock) to be able to give control to the interpreter.",
            "",
            ""
        ]
    ],
    [
        "h5",
        [],
        [
            "Now lets add some code to handle requests"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<pre class=\"triple-quote \">",
            "fn getIP(rq, rs) {",
            "    io.println(\"Request from --> \" + rq.address)",
            "    rs.write(200, rq.address)",
            "}",
            "",
            "http.handler(\"/\", getIP)",
            "",
            "let listen = \":8092\"",
            "let port = env.get(\"PORT\")",
            "if port != \"\" {",
            "    listen = \":\" + port",
            "}",
            "",
            "io.println(\"Listen \" + listen)",
            "http.listen(listen)",
            "</pre>",
            "",
            "Now we have something interesting to try out!",
            "",
            "What we've done is to log and write back as response the address of the device that is doing the request.",
            "",
            "To try it out you need to download grotsky.",
            "",
            "<pre class=\"triple-quote bash\">",
            "$ go get github.com/mliezun/grotsky/cmd/grotsky",
            "</pre>",
            "",
            "Save the Grotsky code under a filed called <span class=\"single-quote\">getip.g</span> and the execute it using the grotsky interpreter:",
            "",
            "<pre class=\"triple-quote bash\">",
            "$ go run $(go env GOPATH)/src/github.com/mliezun/grotsky/cmd/grotsky getip.g",
            "</pre>",
            "",
            "Output:",
            "<pre class=\"triple-quote \">",
            "Listen :8092",
            "</pre>",
            "",
            "Now you can make a request to see if it is working",
            "",
            "<pre class=\"triple-quote bash\">",
            "$ curl localhost:8092",
            "</pre>",
            "",
            "Output:",
            "<pre class=\"triple-quote \">",
            "[::1]:43464",
            "</pre>",
            "",
            "We see that the address contains the port we want to split it and show just the IP.",
            "",
            "",
            ""
        ]
    ],
    [
        "h5",
        [],
        [
            "Let's write a couple functions to do that"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<pre class=\"triple-quote \">",
            "fn findReversed(string, char) {",
            "    for let i = string.length-1; i > -1; i = i - 1 {",
            "        if string[i] == char {",
            "            return i",
            "        }",
            "    }",
            "    return -1",
            "}",
            "",
            "fn parseIP(address) {",
            "    let ix = findReversed(address, \":\")",
            "    return address[:ix]",
            "}",
            "</pre>",
            "",
            "The function <span class=\"single-quote\">findReversed</span> finds the first index where <span class=\"single-quote\">char</span> appears in <span class=\"single-quote\">string</span> starting from the end.",
            "",
            "The function <span class=\"single-quote\">parseIP</span> uses <span class=\"single-quote\">findReversed</span> to obtain the index where \":\" splits the IP and the PORT and uses that index to return just the IP address.",
            "",
            ""
        ]
    ],
    [
        "h5",
        [],
        [
            "Now we can send just the IP address"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<pre class=\"triple-quote \">",
            "fn getIP(rq, rs) {",
            "    let address = parseIP(rq.address)",
            "    io.println(\"Request from --> \" + address)",
            "    rs.write(200, address)",
            "}",
            "</pre>",
            "",
            "Add the two functions at the beginning of the file and modify the getIP function.",
            "",
            "Restart the server and now if you make a request you should get just the IP.",
            "",
            "<pre class=\"triple-quote \">",
            "$ curl localhost:8092",
            "[::1]",
            "</pre>",
            "",
            "Voila!",
            "",
            "",
            ""
        ]
    ],
    [
        "h5",
        [],
        [
            "We have just one last issue: Proxies!"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "Our service will probably sit behind a proxy, so we need to read the address from a special header <span class=\"single-quote\">X-Forwarded-For</span>.",
            "",
            "Let's implement that!",
            "",
            "<pre class=\"triple-quote \">",
            "fn getIP(rq, rs) {",
            "    let address = parseIP(rq.address)",
            "    let forwarded = rq.headers[\"X-Forwarded-For\"]",
            "    if forwarded != nil {",
            "        address = forwarded[0]",
            "    }",
            "    io.println(\"Request from --> \" + address)",
            "    rs.write(200, address)",
            "}",
            "</pre>",
            "",
            "We read the header from the request and if <span class=\"single-quote\">X-Forwarded-For</span> is present we sent that as a response to the user.",
            "",
            ""
        ]
    ],
    [
        "h5",
        [],
        [
            "Our work is complete. Let's try it!"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<pre class=\"triple-quote \">",
            "$ curl localhost:8092 -H 'X-Forwarded-For: 8.8.8.8'",
            "8.8.8.8",
            "",
            "$ curl localhost:8092",
            "[::1]",
            "</pre>",
            "",
            "Well done. Now you can deploy it to Heroku (that's up to you) or any other cloud platform.",
            "",
            "I have my own version running under: https://peaceful-lowlands-45821.herokuapp.com/",
            "",
            "",
            ""
        ]
    ],
    [
        "h5",
        [],
        [
            "Try it from your command line"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<pre class=\"triple-quote bash\">",
            "$ curl https://peaceful-lowlands-45821.herokuapp.com/",
            "</pre>",
            "",
            ""
        ]
    ]
]
)
