fn find(list, obj) {
    for let i = 0; i < list.length; i = i + 1 {
        if type(list[i]) == type(obj) and list[i] == obj {
            return i
        }
    }
    return -1
}

fn filter(list, predicate) {
    let out = []
    for el in list {
        if predicate(el) {
            out = out + [el]
        }
    }
    return out
}

fn map(list, mapFn) {
    let out = []
    for el in list {
        out = out + [mapFn(el)]
    }
    return out
}

fn each(list, eachFn) {
    for el in list {
        eachFn(el)
    }
}

fn foldl(list, initial, foldFn) {
    let out = initial
    for el in list {
        out = foldFn(out, el)
    }
    return out
}

fn foldr(list, initial, foldFn) {
    let out = initial
    for let i = list.length; i > 0; i = i - 1 {
        out = foldFn(out, list[i-1])
    }
    return out
}

fn any(list) {
    for el in list {
        if el {
            return true
        }
    }
    return false
}

fn sum(a, b) {
    return a + b
}

fn endsWith(str, substr) {
    if str.length < substr.length {
        return false
    }
    return str[str.length-1] == substr[substr.length-1] and endsWith(str[:str.length-1], substr[:substr.length-1])
}
